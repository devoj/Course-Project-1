t4 <- strptime("t3, "%B %d, %Y %H:%M"")
t4 <- strptime("t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
?plot
?par
plot(cars)
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
data(mtcars)
dim(mtcars)
play90
play()
dim(mtcars)
head(mtcars)
colnames(mtcars)
tail(mtcars)
class(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcrs$mpg)
hist(mtcars$mpg)
rm(list = ls())
read.csv(A012913postf)
read.table(012913postf, sep = ",")
read.table(012913postf, sep = ",", header = TRUE)
read.csv(012913postf, sep = ",", header = TRUE)
read.csv(012913postf, sep = ",", header = TRUE)
read.csv(012913postf, sep = ",", header = TRUE)
read.csv(012913postf, sep = ",", header = TRUE)
`012913postf` <- read.csv("~/R data/ITC test/012913postf.TXT")
View(`012913postf`)
summary(012913postf)
012913postf
`012913postf` <- read.csv("~/R data/ITC test/012913postf.TXT")
View(`012913postf`)
012913postf
`012913postf` <- read.csv("~/R data/ITC test/012913postf.TXT", header = TRUE)
012913postf
View(`012913postf`)
View(`012913postf`)
View(012913postf)
012913postf
012913postf$Xt
012913postf$DH
dta <- read.csv("~/R data/ITC test/012913postf.TXT", header = TRUE)
dta
class(dta)
dta <- read.csv("~/R data/ITC test/012913postf.TXT", header = TRUE)
dta
summary(dta)
plot(dta$inj, dta$DH)
plot(dta$INJV, dta$DH)
plot(dta$INJV[2:25], dta$DH[2:25])
plot(dta$XMt, dta$DH)
hist(dt$XMt)
names(dta)
class(dta)
plot(dta$XMt[3:25], dta$DH[3:25])
plot(dta$XMt[4:25], dta$DH[4:25])
plot(dta$XMt[4:25], dta$DH[4:25], xlab = "[ligand]", ylab = "Heat of inj", main = "CA-EDTA Titration")
library(swirl)
rm(list=ls())
source()
search()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("slidify")
install.packages("ggplot")
install.packages("ggplot2")
install.packages("devtools")
require("devtools")
install.packages("Rtools")
version
require("devtools")
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
getwd()
ls
ls()
dir()
ls()
dir()
getwd()
dir()
rfunct
rfunct()
./rfunct
dir()
getwd()
dir()
rfunct.r
./rfunct.r
ls()
dir()
"rfunct.R"
myfunction()
"rfunct.R"
myfunction()
source("rfunct.R")
source("rfunct.R")
source("rfunct.R")
source("rfunct.R")
source("rfunct.R")
source("rfunct.R")
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
x <- rnorm(100)
mean(x)
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
source('~/rfunct.r')
library("swirl")
swirl()
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
x + 555 + z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, ,100)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
bye()
install.packages("rmarkdown")
library("rmarkdown")
title: "Untitled"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Sys.time()
x <- Sys.time()
unclass(x)
weekdays(x)
months(x)
names(unclass(x))
p <- as.POSIXlt(x)
p$sec
unclass(p)
names(unclass(p))
cube <- function(x, n) {}
x^3
cube <- function(x, n) {x^3}
cube(3)
?cor
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript.R")
source("submitscript1.R")
source("submitscript1.R")
?list
source('~/Coursera/R Programming/Programming assignment 2/test.r')
x <- list(1, 2, 3, 4, 5)
makevector(x)
source('~/Coursera/R Programming/Programming assignment 2/test.r')
makevector(x)
values <- makevector(x)
values
class(values)
summary(values)
makevector()
rm(list = ls())
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
makevector()
cachemean()
x = c(1, 2, 3, 5, 10)
cacemean(x)
cachemean(x)
x <- as.list(x)
x
summary(x)
x
cachemean(x)
makevector(x)
cachemean(x)
x <- c(1, 2, 3, 4, 5)
makevector(x)
cachemean(x)
class(x)
makevector(x = numeric())
cachemean(4)
cachemean(makevector(x))
rm(list = ls())
ls()
makevector(x)
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
makevector(x)
cachemean(4, 5, 6)
cachemean(c(4, 5, 6))
cachemean(makevector(c(4, 5, 6)))
cachemean(x, c(4, 5, 6))
x <- makevector()
cachemean(x, c(4, 5, 6))
z <- c(4, 5, 6)
cachemean(x, z)
class(z)
?function
q
?function
:
rm(list = ls())
?function()
q
?function
?meant
?mean
?function
q
??function
q
source('~/Coursera/R Programming/Programming assignment 2/test.r')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
x <- 1:10
x
xx <- makevector(x)
source('~/Coursera/R Programming/Programming assignment 2/test.r')
xx <- makeVector(x)
xx
summar(xx)
summary(xx)
xx$set
XX$get
xx$get
xx$get()
xx$set()
xx$setmeant(mean(x))
xx$setmean(mean(x))
xx$getmeant()
xx$getmean()
xx$setmean("Hi")
xx$getmean()
xx$setmean(mean(x))
xx$getmean()
x
m
y
ls()
xx
summary(xx$get)
summary(xx$get())
xx
xx$getmean
xx$getmean[m]
xx$getmean["m"]
cachmean(x)
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
cachemean(x)
cachemean(xx)
rm(xx)
xx <- makeVector(x)
cachevector(xx)
cachemean(xx)
cachemean(xx)
x
xx
library
dir
dir()
ls()
env()
??environment
xx$set
class(xx$set)
cachemean(x)
cachemean(xx)
rm(xx)
xx <- makeVector(x)
cachemean(xx)
cachemean(xx)
x <- 1:1000000000
x <- 1:100000000
mean(x)
mean(x)
y < 1:10
y <- 1:10
mean(y)
mean(x)
mean(x)
mean(x)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(y)
mean(x)
rm(x)
ls()
rm(list = ls())
x <- 1:100000000
ls()
x
rm(x)
ls()
source('~/Coursera/R Programming/Programming assignment 2/cachemean.R')
source('~/Coursera/R Programming/Programming assignment 2/test.r')
x <- 1:1000
makeVector(x)
makeVector(x) -> xx
summary(xx)
xx$get()
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
cachemean(xx)
rm(list = ls())
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
name(vect2) <- c("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(my_data, cnames)
play()
?colnames
colnames(my_data) <- cnames
nxt()
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 5 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
source("https://bioconductor.org/biocLiteR")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
set.seed(1)
rpois(5, 2)
rm(list = ls())
library("swirl")
swirl
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "speed")
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(y = cars$speed, x = cars$dist, xlab = "")
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
source('~/Coursera/Exploratory Data Analysis/Course-Project-1/Course_Project_1_code.R')
